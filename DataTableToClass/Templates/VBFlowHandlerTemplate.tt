<#@ template language="VB" #>

Public Class  <#= flowHandlerName#>
    Implements IApprovalHandler

	 Public Function GetFlowStepByID(id As Integer) As ApprovalBase Implements IApprovalHandler.GetFlowStepByID
        Return EntityHelper.GetFristDefault(Of  <#= modelName#>)(Function(x) x.ID = id)
    End Function

    ''' <summary>
    ''' 获取下一步审批
    ''' </summary>
    ''' <param name="lid"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Function GetNextFlowStep(lid As Integer) As ApprovalBase Implements IApprovalHandler.GetNextFlowStep
        Return ApprovalHandlerCommon.GetNextStepApproval(Of <#= modelName#>)(lid)
    End Function

    ''' <summary>
    ''' 获取第一步审批
    ''' </summary>
    ''' <param name="lid"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Function GetFirstFlowStep(lid As Integer) As ApprovalBase Implements IApprovalHandler.GetFirstFlowStep
        Return ApprovalHandlerCommon.GetFirstFlowStep(Of <#= modelName#>)(lid)
    End Function
    ''' <summary>
    ''' 获取当前审批
    ''' </summary>
    ''' <param name="lid"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Function GetCurrentFlowStep(lid As Integer) As ApprovalBase Implements IApprovalHandler.GetCurrentFlowStep
        Return ApprovalHandlerCommon.GetCurrentStepApproval(Of <#= modelName#>)(lid)
    End Function

    Public Function GetApprovaList(projectId As Integer, jid As Integer) As String Implements IApprovalHandler.GetApprovaList
        Dim listModel = EntityHelper.GetSelect(Of <#= modelName#>)(Function(x) x.PID = projectId AndAlso x.SID = jid)
        For Each model In listModel
            With model
                If String.IsNullOrEmpty(.ApproverIds) Then
                    .ApproverIds = ""
                End If
            End With
        Next
        Dim result = (From m In listModel
                  Select New With {
                        m.ID,
                        m.PID,
                        m.JID,
                        m.State,
                        m.IDX,
                        m.ApproverIds,
                        m.ExMode,
                        m.ExDate,
                        m.ExChecked,
                        m.ExResult,
                        m.StepName,
                        m.StepCruces,
                        m.Note,
                        m.RoleIds,
                        Key .StateName = DataMapServices.GetApproveStateName(m.State),
                        Key .RoleName = m.RoleNames,
                        Key .ApproveName = m.ApproverNames,
                        Key .ProjectName = ProjectServices.GetProjectName(m.PID)
                   })
        Dim rztStr = ObjectToJSON(result)
        rztStr = RegexDate(rztStr)
        Return rztStr
    End Function

    Public Function GetFlowlist(lid As Integer) As System.Collections.Generic.List(Of ApprovalBase) Implements IApprovalHandler.GetFlowlist
        Return ApprovalHandlerCommon.GetFlowlist(Of <#= modelName#>)(lid).ToList
    End Function

    Public Function GetNextStepByID(lid As Integer, stepId As Integer) As ApprovalBase Implements IApprovalHandler.GetNextStepByID
        Return ApprovalHandlerCommon.GetNextStepApproval(Of <#= modelName#>)(lid)
    End Function

    Public Function Update(model As ApprovalBase) As Boolean Implements IApprovalHandler.Update
        Return EntityHelper.Update(Of <#= modelName#>)(model)
    End Function

   ''' <summary>
    ''' 设置流程审批人
    ''' </summary>
    ''' <param name="projectId"></param>
    ''' <param name="stepId"></param>
    ''' <param name="approver"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Function SetFlowStepUser(projectId As Integer, stepId As Integer, approver As String) As Boolean Implements IApprovalHandler.SetFlowStepUser
        Return ApprovalHandlerCommon.SetFlowStepApprover(Of <#= modelName#>)(projectId, stepId, approver)
    End Function

    ''' <summary>
    ''' 检查审批人
    ''' </summary>
    ''' <param name="applyType"></param>
    ''' <param name="projectId"></param>
    ''' <param name="lid"></param>
    ''' <param name="curUserId"></param>
    ''' <param name="approvalResult"></param>
    ''' <param name="curStepId"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Function IsNeedSetFlowUser(applyType As ApprovalTypeEnum,
                                  projectId As Integer,
                                  lid As Integer,
                                  curUserId As Integer,
                                  approvalResult As Integer,
                                  curStepId As Integer) As Integer Implements IApprovalHandler.IsNeedSetFlowUser
        Dim obj = <#= lidServiceName#>.Get(lid)
        Dim curFlowStep = <#= serviceName#>.GetCurrentStepApproval(lid)

        Return ApprovalHandlerCommon.CheckApproval(applyType, projectId, lid, obj.PlanCode, obj.PlanName, curUserId, approvalResult, curFlowStep, Me)
    End Function

    ''' <summary>
    ''' 是否为最后一步
    ''' </summary>
    ''' <param name="lid"></param>
    ''' <param name="stepId"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Function IsLastStepFlowStep(lid As Integer, stepId As Integer) As Boolean Implements IApprovalHandler.IsLastStepFlowStep
        Return ApprovalHandlerCommon.IsLastStepFlowStep(Of <#= modelName#>)(lid, stepId)
    End Function
    
    ''' <summary>
    ''' 判断是否存在审批流程
    ''' </summary>
    ''' <param name="lid"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Function IsExistApprovalFlow(lid As Integer) As Boolean Implements IApprovalHandler.IsExistApprovalFlow
        Return ApprovalHandlerCommon.IsExistApprovalFlow(Of <#= modelName#>)(lid)
    End Function

    Public Sub DoFuncAfterFinishFlow(aplType As Integer, projectId As Integer, lastApprovalStepModel As ApprovalBase) Implements IApprovalHandler.DoFuncAfterFinishFlow
        Call <#= serviceName#>.FinishFunc(aplType, projectId, lastApprovalStepModel)
    End Sub

    Public Function SubmitFlow(applyType As ApprovalTypeEnum, curUserId As Integer, projectId As Integer, lid As Integer, stepId As Integer, opinion As String, approvalResult As Integer) As Boolean Implements IApprovalHandler.SubmitFlow
        Dim lidCode As String = <#= lidServiceName#>.GetCode(lid)
        Dim curFlowStep = Me.GetCurrentFlowStep(lid)
        Return ApprovalHandlerCommon.SubmitApproval(applyType, curUserId, projectId, lid, lidCode, opinion, approvalResult,
                                               AddressOf <#= serviceName#>.FinishFunc,
                                               AddressOf <#= serviceName#>.RejectFunc,
                                               curFlowStep, Me)
    End Function


    ''' <summary>
    ''' 获取提交人
    ''' </summary>
    ''' <param name="lid"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Function GetOriginator(lid As Integer) As String Implements IApprovalHandler.GetOriginator
        Return ApprovalHandlerCommon.GetOriginator(Of <#= modelName#>)(lid)
    End Function

#Region "单据相关"
    ''' <summary>
    ''' 通过ID获取单据信息
    ''' </summary>
    ''' <param name="id"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Function GetLidInfo(id As Integer) As LidInfo Implements IApprovalHandler.GetLidInfo
        Dim model = <#= lidServiceName#>.Get(Function(x) x.ID = id)
        Dim info = New LidInfo
        With info
            .ID = model.ID
            .Name = model.PlanName
            .Code = model.PlanCode
            .ProjectName = ProjectServices.GetProjectName(model.PID)
            .State = model.State
        End With
        Return info
    End Function
    ''' <summary>
    ''' 通过编号获取单据信息
    ''' </summary>
    ''' <param name="lidCode"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Function GetLidInfo(lidCode As String) As LidInfo Implements IApprovalHandler.GetLidInfo
        Dim model = <#= lidServiceName#>.Get(Function(x) x.PlanCode = lidCode)
        Dim info = New LidInfo
        With info
            .ID = model.ID
            .Name = model.PlanName
            .Code = model.PlanCode
            .ProjectName = ProjectServices.GetProjectName(model.PID)
            .State = model.State
        End With
        Return info
    End Function
#End Region

#Region "传阅相关"
    ''' <summary>
    ''' 设置传阅人
    ''' </summary>
    ''' <param name="projectId"></param>
    ''' <param name="stepId"></param>
    ''' <param name="CirculatedUserIds"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Function SetCirculatedUser(projectId As Integer, stepId As Integer, CirculatedUserIds As String) As Boolean Implements IApprovalHandler.SetCirculatedUser
        Return ApprovalHandlerCommon.SetCirculatedUser(Of <#= modelName#>)(projectId, stepId, CirculatedUserIds)
    End Function

    ''' <summary>
    ''' 更新已阅人
    ''' </summary>
    ''' <param name="userId"></param>
    ''' <param name="lid"></param>
    ''' <remarks></remarks>
    Public Sub UpdateIsView(userId As Integer, lid As Integer) Implements IApprovalHandler.UpdateIsView
        Call ApprovalHandlerCommon.UpdateIsView(Of <#= modelName#>)(userId, lid)
    End Sub

    ''' <summary>
    ''' 是否设置传阅人
    ''' </summary>
    ''' <param name="applyType"></param>
    ''' <param name="projectId"></param>
    ''' <param name="lid"></param>
    ''' <param name="curUserId"></param>
    ''' <param name="approvalResult"></param>
    ''' <param name="curFlowStep"></param>
    ''' <param name="approvalHandler"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Function IsNeedSetCirculatedUser(applyType As ApprovalTypeEnum, projectId As Integer, lid As Integer, curUserId As Integer, approvalResult As Integer, curFlowStep As ApprovalBase, approvalHandler As IApprovalHandler) As Boolean Implements IApprovalHandler.IsNeedSetCirculatedUser
        Return ApprovalHandlerCommon.IsNeedSetCirculatedUser(applyType, projectId, lid, curUserId, approvalResult, curFlowStep, approvalHandler)
    End Function

#End Region

#Region "FlowRecord相关"
    ''' <summary>
    ''' 更新FlowRecord
    ''' </summary>
    ''' <param name="applyType"></param>
    ''' <param name="lid"></param>
    ''' <remarks></remarks>
    Public Sub UpdateFlowRecord(applyType As ApprovalTypeEnum, lid As Integer) Implements IApprovalHandler.UpdateFlowRecord
        Call <#= lidServiceName#>.UpdateFlowRecord(applyType, lid)
    End Sub

#End Region

#Region "流程督办"
    ''' <summary>
    ''' 更改当前节点
    ''' </summary>
    ''' <param name="aplType"></param>
    ''' <param name="projectId"></param>
    ''' <param name="lid"></param>
    ''' <param name="lidCode"></param>
    ''' <param name="userId"></param>
    ''' <param name="flowStep"></param>
    ''' <param name="approvalHandler"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Function ChangeCurStep(aplType As Integer, projectId As Integer, lid As Integer, lidCode As String, userId As Integer, flowStep As ApprovalBase, approvalHandler As IApprovalHandler) As Boolean Implements IApprovalHandler.ChangeCurStep
        Return ApprovalHandlerCommon.ChangeCurStep(Of <#= modelName#>)(aplType, projectId, lid, lidCode, userId, flowStep, Me)
    End Function
    ''' <summary>
    ''' 完成审批
    ''' </summary>
    ''' <param name="applyType"></param>
    ''' <param name="projectId"></param>
    ''' <param name="lid"></param>
    ''' <param name="lidCode"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Function EndApproval(applyType As Integer, projectId As Integer, lid As Integer, lidCode As String) As Boolean Implements IApprovalHandler.EndApproval
        Return ApprovalHandlerCommon.EndApproval(Of <#= modelName#>)(applyType, projectId, lid, lidCode, Me)
    End Function

    ''' <summary>
    ''' 催办
    ''' </summary>
    ''' <param name="aplType"></param>
    ''' <param name="projectId"></param>
    ''' <param name="lid"></param>
    ''' <param name="lidCode"></param>
    ''' <param name="flowStep"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Function RemindApprover(aplType As Integer, projectId As Integer, lid As Integer, lidCode As String, flowStep As ApprovalBase) As Boolean Implements IApprovalHandler.RemindApprover
        Return ApprovalHandlerCommon.RemindApprover(Of <#= modelName#>)(aplType, projectId, lid, lidCode, flowStep, Me)
    End Function
#End Region

#Region "企业微信相关"
    ''' <summary>
    ''' 发送企业微信消息
    ''' </summary>
    ''' <param name="applType"></param>
    ''' <param name="projectId"></param>
    ''' <param name="lid"></param>
    ''' <param name="stepName"></param>
    ''' <param name="msgType"></param>
    ''' <param name="title"></param>
    ''' <param name="description"></param>
    ''' <param name="btnText"></param>
    ''' <remarks></remarks>
    Public Sub BuildWebChatMSG(applType As Integer, projectId As Integer, lid As Integer, stepName As String, msgType As Integer, ByRef title As String, ByRef description As String, ByRef btnText As String) Implements IApprovalHandler.BuildWebChatMSG
        <#= lidServiceName#>.BuildWebChatMSG(applType, projectId, lid, stepName, msgType, title, description, btnText)
    End Sub

    ''' <summary>
    ''' 构建企业微信审批信息
    ''' </summary>
    ''' <param name="dataType">数据类型</param>
    ''' <param name="apprlType">审批类型</param>
    ''' <param name="lid">单据id</param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Function WebChatBuildListInfo(dataType As Integer, apprlType As Integer, lid As Integer) As String Implements IApprovalHandler.WebChatBuildListInfo
        Return <#= lidServiceName#>.WebChatBuildListInfo(dataType, apprlType, lid)
    End Function
#End Region
End Class